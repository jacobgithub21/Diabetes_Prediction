# -*- coding: utf-8 -*-
"""Diabetes_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uyz3X-sl7esTih__IzqPZNGvzTPeY9ZG
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

data = pd.read_csv('/content/diabetes.csv')

data.head()

data.describe()

data.shape

data.columns

data.info()

data.isnull().sum()

x = data.drop(columns='Outcome', axis=1)
y = data['Outcome']

print(x)
print(y)

print(x.shape)
print(y.shape)

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.20, random_state=2)

from sklearn import svm

from sklearn.preprocessing import StandardScaler

standard = StandardScaler()

std = standard.fit(x)

std_data = standard.transform(x)

x = std_data

print(x)

model = svm.SVC(kernel='linear')

model.fit(x_train, y_train)

y_predict = model.predict(x_test)

train = model.predict(x_train)
train_accuracy = accuracy_score(train, y_train)
print('the train_accuracy is:', train_accuracy)

test = model.predict(x_test)
test_accuracy = accuracy_score(test, y_test)
print('the test accuracy is:', test_accuracy)

input_data = (1,	85,	66,	29,	0,	26.6,	0.351,	31			)
result = np.asarray(input_data)
result_reshape = result.reshape(1,-1)
std = standard.transform(result_reshape)
print(std)
prediction = model.predict(std)
print(prediction)

if (prediction[0]== 0):
  print('the person is not diabetic')
else:
  print('the person is diabetic')

